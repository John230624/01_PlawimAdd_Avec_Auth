// prisma/schema.prisma

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model Address {
  id          Int      @id @default(autoincrement())
  userId      String   @db.VarChar(255)
  fullName    String   @db.VarChar(255)
  phoneNumber String   @db.VarChar(20)
  pincode     String?  @db.VarChar(10)
  area        String   @db.Text
  city        String   @db.VarChar(100)
  state       String   @db.VarChar(100)
  isDefault   Boolean  @default(false) @map("isDefault")
  createdAt   DateTime @default(now()) // CORRIGÉ: Suppression de @db.Timestamp(0)
  updatedAt   DateTime @updatedAt      // CORRIGÉ: Suppression de @db.Timestamp(0)

  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  orders      Order[]
  @@map("addresses")
}

model CartItem {
  id        String   @id @default(uuid()) @db.VarChar(255)
  userId    String   @db.VarChar(255)
  productId String   @db.VarChar(255)
  quantity  Int
  createdAt DateTime @default(now()) // CORRIGÉ: Suppression de @db.Timestamp(0)
  updatedAt DateTime @updatedAt      // CORRIGÉ: Suppression de @db.Timestamp(0)

  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@unique([userId, productId], name: "user_product_unique")
  @@map("cart_items")
}

model Category {
  id          String   @id @default(uuid()) @db.VarChar(255)
  name        String   @unique @db.VarChar(255)
  description String?  @db.Text
  imageUrl    String?  @db.VarChar(255)
  createdAt   DateTime @default(now()) // CORRIGÉ: Suppression de @db.Timestamp(0)
  updatedAt   DateTime @updatedAt      // CORRIGÉ: Suppression de @db.Timestamp(0)

  @@map("categories")
}

enum OrderStatus {
  PENDING
  PAID_SUCCESS
  PAYMENT_FAILED
  PROCESSING
  SHIPPED
  DELIVERED
  CANCELLED
  @@map("status")
}

enum PaymentStatus {
  PENDING
  COMPLETED
  FAILED
  REFUNDED
  @@map("paymentStatus")
}

model Order {
  id                   String        @id @default(uuid()) @db.VarChar(255)
  userId               String        @db.VarChar(255)
  totalAmount          Decimal       @db.Decimal(10, 2)
  kakapayTransactionId String?       @db.VarChar(255) @map("kakapayTransactionId")
  status               OrderStatus?  @default(PENDING)
  paymentStatus        PaymentStatus? @default(PENDING) @map("paymentStatus")
  shippingAddressLine1 String        @db.VarChar(255) @map("shippingAddressLine1")
  shippingAddressLine2 String?       @db.VarChar(255) @map("shippingAddressLine2")
  shippingCity         String        @db.VarChar(100) @map("shippingCity")
  shippingState        String        @db.VarChar(100) @map("shippingState")
  shippingZipCode      String        @db.VarChar(20) @map("shippingZipCode")
  shippingCountry      String        @db.VarChar(100) @map("shippingCountry")
  orderDate            DateTime      @default(now()) // CORRIGÉ: Suppression de @db.Timestamp(0)
  updatedAt            DateTime      @updatedAt      // CORRIGÉ: Suppression de @db.Timestamp(0)
  shippingAddressId    Int?          @map("shippingAddressId")

  user                 User          @relation(fields: [userId], references: [id])
  shippingAddress      Address?      @relation(fields: [shippingAddressId], references: [id], onDelete: SetNull, onUpdate: Cascade)
  orderItems           OrderItem[]
  payment              Payment?

  @@map("orders")
}

model OrderItem {
  id           String   @id @default(uuid()) @db.VarChar(255)
  orderId      String   @db.VarChar(255)
  productId    String   @db.VarChar(255)
  quantity     Int
  priceAtOrder Decimal  @db.Decimal(10, 2) @map("priceAtOrder")
  createdAt    DateTime @default(now()) // CORRIGÉ: Suppression de @db.Timestamp(0)
  updatedAt    DateTime @updatedAt      // CORRIGÉ: Suppression de @db.Timestamp(0)

  order        Order    @relation(fields: [orderId], references: [id])
  product      Product  @relation(fields: [productId], references: [id])

  @@map("order_items")
}

model Payment {
  id            String       @id @default(uuid()) @db.VarChar(255)
  orderId       String       @unique @db.VarChar(255)
  paymentMethod String       @db.VarChar(100) @map("paymentMethod")
  transactionId String?      @unique @db.VarChar(255) @map("transactionId")
  amount        Decimal      @db.Decimal(10, 2)
  currency      String       @db.VarChar(10)
  status        PaymentStatus? @default(PENDING)
  paymentDate   DateTime?    @map("paymentDate") // CORRIGÉ: Suppression de @db.Timestamp(0)
  createdAt     DateTime     @default(now()) // CORRIGÉ: Suppression de @db.Timestamp(0)
  updatedAt     DateTime     @updatedAt      // CORRIGÉ: Suppression de @db.Timestamp(0)

  order         Order        @relation(fields: [orderId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  @@map("payments")
}

model Product {
  id          String    @id @default(uuid()) @db.VarChar(255) // CORRIGÉ: Ajout de @default(uuid())
  name        String    @db.VarChar(255)
  description String?   @db.Text
  price       Decimal   @db.Decimal(10, 2) // CORRIGÉ: Changé de Float à Decimal
  stock       Int
  imgUrl      String?   @db.Text @map("imgUrl")
  createdAt   DateTime  @default(now()) // CORRIGÉ: Suppression de @db.Timestamp(0)
  updatedAt   DateTime  @updatedAt      // CORRIGÉ: Suppression de @db.Timestamp(0)
  offerPrice  Decimal?  @db.Decimal(10, 2) @map("offerPrice")
  category    String    @default("Général") @db.VarChar(255) // IMPORTANT: Reste une string simple pour l'instant

  cartItems   CartItem[]
  orderItems  OrderItem[]
  reviews     Review[]

  @@map("products")
}

model Review {
  id        String   @id @default(uuid()) @db.VarChar(255)
  productId String   @db.VarChar(255)
  userId    String   @db.VarChar(255)
  rating    Int
  comment   String?  @db.Text
  createdAt DateTime @default(now()) // CORRIGÉ: Suppression de @db.Timestamp(0)
  updatedAt DateTime @updatedAt      // CORRIGÉ: Suppression de @db.Timestamp(0)

  product   Product  @relation(fields: [productId], references: [id])
  user      User     @relation(fields: [userId], references: [id])

  @@map("reviews")
}

enum UserRole {
  USER
  ADMIN
  @@map("role")
}

model User {
  id                     String    @id @unique @default(uuid()) @db.VarChar(255)
  email                  String    @unique @db.VarChar(255)
  password               String    @db.VarChar(255)
  firstName              String?   @db.VarChar(255) @map("firstName")
  lastName               String?   @db.VarChar(255) @map("lastName")
  role                   UserRole? @default(USER)
  resetPasswordToken     String?   @db.VarChar(255) @map("resetPasswordToken")
  resetPasswordExpires   DateTime? @db.DateTime(0) @map("resetPasswordExpires") // CONSERVÉ: @db.DateTime(0) car ce n'est pas @updatedAt
  createdAt              DateTime  @default(now()) // CORRIGÉ: Suppression de @db.Timestamp(0)
  updatedAt              DateTime  @updatedAt      // CORRIGÉ: Suppression de @db.Timestamp(0)
  phoneNumber            String?   @db.VarChar(15) @map("phoneNumber")

  addresses              Address[]
  cartItems              CartItem[]
  orders                 Order[]
  reviews                Review[]

  @@map("users")
}