// prisma/schema.prisma

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model Address {
  id          Int      @id @default(autoincrement())
  userId      String   @db.VarChar(255)
  fullName    String   @db.VarChar(255)
  phoneNumber String   @db.VarChar(20)
  pincode     String?  @db.VarChar(10)
  area        String   @db.Text
  city        String   @db.VarChar(100)
  state       String   @db.VarChar(100)
  isDefault   Boolean  @default(false) @map("isDefault")
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  orders      Order[]
  @@map("addresses")
}

model CartItem {
  id        String   @id @default(uuid()) @db.VarChar(255)
  userId    String   @db.VarChar(255)
  productId String   @db.VarChar(255)
  quantity  Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@unique([userId, productId], name: "user_product_unique")
  @@map("cart_items")
}

model Category {
  id          String   @id @default(uuid()) @db.VarChar(255)
  name        String   @unique @db.VarChar(255)
  description String?  @db.Text
  imageUrl    String?  @db.VarChar(255)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("categories")
}

enum OrderStatus {
  PENDING
  PAID_SUCCESS
  PAYMENT_FAILED
  PROCESSING
  SHIPPED
  DELIVERED
  CANCELLED
  @@map("status")
}

enum PaymentStatus {
  PENDING
  COMPLETED
  FAILED
  REFUNDED
  @@map("paymentStatus")
}

model Order {
  id                     String        @id @default(uuid()) @db.VarChar(255)
  userId                 String        @db.VarChar(255)
  totalAmount            Decimal       @db.Decimal(10, 2)
  kakapayTransactionId   String?       @db.VarChar(255) @map("kakapayTransactionId")
  status                 OrderStatus?  @default(PENDING)
  paymentStatus          PaymentStatus? @default(PENDING) @map("paymentStatus")
  shippingAddressLine1   String        @db.VarChar(255) @map("shippingAddressLine1")
  shippingAddressLine2   String?       @db.VarChar(255) @map("shippingAddressLine2")
  shippingCity           String        @db.VarChar(100) @map("shippingCity")
  shippingState          String        @db.VarChar(100) @map("shippingState")
  shippingZipCode        String        @db.VarChar(20) @map("shippingZipCode")
  shippingCountry        String        @db.VarChar(100) @map("shippingCountry")
  orderDate              DateTime      @default(now())
  updatedAt              DateTime      @updatedAt
  shippingAddressId      Int?          @map("shippingAddressId")

  user                   User          @relation(fields: [userId], references: [id])
  shippingAddress        Address?      @relation(fields: [shippingAddressId], references: [id], onDelete: SetNull, onUpdate: Cascade)
  orderItems             OrderItem[]
  payment                Payment?

  @@map("orders")
}

model OrderItem {
  id           String   @id @default(uuid()) @db.VarChar(255)
  orderId      String   @db.VarChar(255)
  productId    String   @db.VarChar(255)
  quantity     Int
  priceAtOrder Decimal  @db.Decimal(10, 2) @map("priceAtOrder")
  name         String   @db.VarChar(255)
  imgUrl       String?  @db.Text
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  order        Order    @relation(fields: [orderId], references: [id])
  product      Product  @relation(fields: [productId], references: [id])

  @@map("order_items")
}

model Payment {
  id            String         @id @default(uuid()) @db.VarChar(255)
  orderId       String         @unique @db.VarChar(255)
  paymentMethod String         @db.VarChar(100) @map("paymentMethod")
  transactionId String?        @unique @db.VarChar(255) @map("transactionId")
  amount        Decimal        @db.Decimal(10, 2)
  currency      String         @db.VarChar(10)
  status        PaymentStatus? @default(PENDING)
  paymentDate   DateTime?      @map("paymentDate")
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt

  order         Order          @relation(fields: [orderId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  @@map("payments")
}

model Product {
  id          String    @id @default(uuid()) @db.VarChar(255)
  name        String    @db.VarChar(255)
  description String?   @db.Text
  price       Decimal   @db.Decimal(10, 2)
  stock       Int
  imgUrl      String?   @db.Text @map("imgUrl")
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  offerPrice  Decimal?  @db.Decimal(10, 2) @map("offerPrice")
  category    String    @default("Général") @db.VarChar(255)

  cartItems   CartItem[]
  orderItems  OrderItem[]
  reviews     Review[]

  @@map("products")
}

model Review {
  id        String   @id @default(uuid()) @db.VarChar(255)
  productId String   @db.VarChar(255)
  userId    String   @db.VarChar(255)
  rating    Int
  comment   String?  @db.Text
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  product   Product  @relation(fields: [productId], references: [id])
  user      User     @relation(fields: [userId], references: [id])

  @@map("reviews")
}

enum UserRole {
  USER
  ADMIN
  @@map("role")
}

model User {
  id                     String    @id @unique @default(uuid()) @db.VarChar(255)
  email                  String    @unique @db.VarChar(255)
  password               String    @db.VarChar(255)
  firstName              String?   @db.VarChar(255) @map("firstName")
  lastName               String?   @db.VarChar(255) @map("lastName")
  role                   UserRole? @default(USER)
  resetPasswordToken     String?   @db.VarChar(255) @map("resetPasswordToken")
  resetPasswordExpires   DateTime? @db.DateTime(0) @map("resetPasswordExpires")
  createdAt              DateTime  @default(now())
  updatedAt              DateTime  @updatedAt
  phoneNumber            String?   @db.VarChar(15) @map("phoneNumber")

  addresses              Address[]
  cartItems              CartItem[]
  orders                 Order[]
  reviews                Review[]

  @@map("users")
}